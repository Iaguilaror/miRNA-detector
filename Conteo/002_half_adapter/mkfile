< ../config.mk

all:QV:
##	mkdir -p tmp/collumns
##	mkdir -p results/
	bin/targets | xargs mk

results/%.count_table.REPORT.txt:Q: results/%.count_table.tsv
	echo "[DEBUGGING] doing $target"
##	echo "###TEXTO SIN ACENTOS###
##	#Algoritmo de busqueda:	grep -x -c "SECUENCIA_FASTA" SRR_identificador
##	# Se busco que las secuencias solicitadas (pej. >bta-let-7a.MIMAT0003844) tuvieran un match exacto en las lecturas de las bibliotecas SRRXXX
##	#Parametros de ejecucion
##	$(cat ../config.mk | grep -v "##")
##	#=#
##	#==Secuencias fasta que se buscaron==#
##	$(cat $SEQUENCES_FILE $NEGATIVE_SEQS)" > $target.build \
##	&& mv $target.build $target

results/%.count_table.tsv:Q:	##data/summary_tables/%.preprocessing_summary.tsv results/%.$SEQS.count_table.unformatted
	##set -x
	echo "[DEBUGGING] doing $target"
##	Rscript bin/table_transform.R results/$stem.$SEQS.count_table.unformatted \
##	&& tail -n+2 results/$stem.$SEQS.count_table.unformatted.tsv.build > tmp/$stem.$SEQS.count_table.no_headers \
##	&& HEAD=$(head -n1 results/$stem.$SEQS.count_table.unformatted.tsv.build) \
##	&& echo "$HEAD	Number_of_filtered_reads	Number_of_original_reads"> tmp/$stem.$SEQS.count_table.header \
##	&& while read p
##	do
##		SRR_ID=$(echo $p | cut -d" " -f1)
##		TOTAL_READS=$(grep "^$SRR_ID" data/summary_tables/$stem.preprocessing_summary.tsv | cut -f8)
##		FILTERED_READS=$(grep "^$SRR_ID" data/summary_tables/$stem.preprocessing_summary.tsv | cut -f17)
##		echo "[DEBUGGING] finding number of filtered reads for $SRR_ID"
##		##echo "[DEBUGING] filtered reads is $FILTERED_READS"
##		echo $p	$FILTERED_READS	$TOTAL_READS | tr " " "\t" >> tmp/$stem.$SEQS.count_table.header
##	done < tmp/$stem.$SEQS.count_table.no_headers \
##	&& mv tmp/$stem.$SEQS.count_table.header $target \
##	&& rm results/$stem.$SEQS.count_table.unformatted* tmp/$stem.$SEQS.*

results/%.$SEQS.count_table.unformatted:Q: results/%.$SEQS.counted_SRR.list
	mkdir -p `dirname $target`
	mkdir -p tmp/collumns
	echo "[DEBUGGING]doing $target"
##	while read p
##	do
##		echo "[DEBUGGING]pasting $p"
##		cut -f1 data/counts/$stem/$p.counts | sed "s#sequence_name##g" > tmp/collumns/$stem.$SEQS.seqs.cols
##		cut -f2 data/counts/$stem/$p.counts > tmp/collumns/$stem.$SEQS.$p.cols
##	done < $prereq \
##	&& paste -d "\t" $( ls -d -1 tmp/collumns/$stem.$SEQS.*.cols) > $target.build \
##	&& mv $target.build $target \
##	&& rm $prereq \
##	&& rm tmp/collumns/$stem.$SEQS.*.cols

results/%.$SEQS.counted_SRR.list:Q: results/%.$SEQS.available_SRRid_fastas.list
##	set -x
	mkdir -p `dirname $target`
	echo "[DEBUGGING] doing $target"
##	cut -f1 $SRR_FILE | grep "^SRR" \
##	| grep -x -f - $prereq > $target.build &&
##	mv $target.build $target \
##	&& rm $prereq

results/%.$SEQS.available_SRRid_fastas.list:Q: data/counts/%
	mkdir -p `dirname $target`
	echo "[DEBUGGING]doing $target"
##	find -L $prereq -type f -name "*.counts" -exec basename {} \; | sed "s#\\.counts##g" > $target.build \
##	&& mv $target.build $target
