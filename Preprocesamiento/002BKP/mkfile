< ../config.mk

all:QV: data/fastq data/sample.list
	mkdir -p tmp/cut_survey/
	mkdir -p tmp/fastqc/
	mkdir -p tmp/cutadapt/
	mkdir -p tmp/trimmomatic/
	mkdir -p tmp/minimized/
	mkdir -p tmp/slices/
	bash bin/targets | xargs mk

results/%.filtered.fasta:Q: tmp/minimized/%.minimized.fastqc
	mkdir -p results/
	echo "[DEBUGGING]converting to fasta for $target"
	# fastq_to_fasta -i $prereq -o $target.build &&
	# mv $target.build $target

tmp/minimized/%.minimized.fastqc:Q: tmp/trimmomatic/%.trimmo.fastq.gz
	echo "[DEBUGGING]minimizing for $target"
	# cutadapt -M $MAX_LENGTH --untrimmed-output $target.build --too-long-output $target.toolong -o /dev/null $prereq > $target.report &&
	# mv $target.build $target

tmp/trimmomatic/%.trimmo.fastq.gz:Q: tmp/cutadapt/%.cutadapt.fastq.gz
	echo "[DEBUGGING]trimmomatic working for $target"
	# java -jar $TRIMdir SE -threads $T_CORES $prereq $target.build SLIDINGWINDOW:5:$MIN_QUAL MINLEN:$MIN_LENGTH &&
	# gzip -f -1 $target.build &&
	# mv $target.build.gz $target

tmp/cutadapt/%.cutadapt.fastq.gz:Q: tmp/fastqc/%_fastqc/adapter.status
	SRRid=$(basename $target .cutadapt.fastq.gz)
	echo "[DEBUGGING]Looking for adapters in $SRRid"
	# ADP_CONTENT=$(grep "max_adapter_presence:" $prereq | cut -d" " -f2) ##GET MAX_ADAPTER_CONTENT DETECTED IN PREREQ
	# echo "[DEBUGGING]max adapter content found: $ADP_CONTENT"
	# CUT_FASTQ=$(awk -v ADP_CONTENT="$ADP_CONTENT" -v ADP_CUTOFF="$ADAPTER_CUTTOF" 'BEGIN {if (ADP_CONTENT > ADP_CUTOFF) print ("YES"); else print ("NO");}') ##USING awk to define if adapter treshold has been reached; awk is needed beacause it can directly compare decimal values.
	# if [ "$CUT_FASTQ" = "NO" ]; then ##INSERT IF CONDITIONAL TO DECIDE IF ADAPTER MUST BE TRIMMED OR NOT WITH CUTADAPT
		# echo "[DEBUGGING]NO adapters found in $SRRid"
		# FASTQ_LINES=$(( $(zcat data/fastq/$SRRid.fastq.gz | wc -l | cut -d" " -f1)/4 ))
		# touch $target.uncut
		# echo "Total reads processed: $FASTQ_LINES" > $target.report
		# echo "Reads with adapters: $FASTQ_LINES" >> $target.report
		# cp data/fastq/$SRRid.fastq.gz $target.build &&
		# mv $target.build $target
	# else
		# echo "[DEBUGGING]cutadapt working for $SRRid"
		# ADAP_5=$(grep -w "^$SRRid" data/sample.list | cut -f3)
		# ADAP_3=$(grep -w "^$SRRid" data/sample.list | cut -f4)
		# echo "[DEBUGGING]adapters are $ADAP_5 $ADAP_3"
		## IF statements to accomodate SRR files for which you only have either one of the adapters
		# if [ "$ADAP_5" = "N/A" ]; then
			# echo "[DEBUGGING]No info for 5-end adapter"
			# cutadapt --match-read-wildcards -b $ADAP_3 --untrimmed-output $target.uncut -o $target.build data/fastq/$SRRid.fastq.gz > $target.report
		# elif [ "$ADAP_3" = "N/A" ]; then
			# echo "[DEBUGGING]No info for 3-end adapter"
			# cutadapt --match-read-wildcards -b $ADAP_5 --untrimmed-output $target.uncut -o $target.build data/fastq/$SRRid.fastq.gz > $target.report
		# else
			# echo "[DEBUGGING]Sequence valid for both adapters"
			# cutadapt --match-read-wildcards -b $ADAP_5 -b $ADAP_3 --untrimmed-output $target.uncut -o $target.build data/fastq/$SRRid.fastq.gz > $target.report
		# fi
		# gzip -f -1 $target.build &&
		# mv $target.build.gz $target
	# fi

###Make a file to sum adapter content percentages by collum.	One must undersatnd fastqc adapter content module
## OUTPUT MUST BE A 
##INFO FROM FASTQC MANUAL The plot itself shows a cumulative percentage count of the proportion of your library which has seen each of the adapter sequences at each position. Once a sequence has been seen in a read it is counted as being present right through to the end of the read so the percentages you see will only increase as the read length goes on.
tmp/fastqc/%_fastqc/adapter.status:Q: tmp/cut_survey/%.report tmp/fastqc/%_fastqc/adapter_content.tsv
	#NUMBER_OF_LINES=$(wc -l $prereq | cut -d" " -f1)
	echo "[DEBUGGING]number of lines is $NUMBER_OF_LINES"
	# if [ $NUMBER_OF_LINES -eq 2 ]; then
		# MAX_ADAPTER="0.0"
	# else
		# MAX_ADAPTER=$(grep -v "^>>" $prereq | grep -v "^\#" | cut -f2- | tr "\t" "\n" | sort -n | tail -n1)
	# fi
	# echo "max_adapter_presence: $MAX_ADAPTER" > $target.build &&
	# mv $target.build $target

tmp/fastqc/%_fastqc/adapter_content.tsv:Q: tmp/slices/%.fastq.gz	##CONSIDER CHANGING PREREQ TO data/fastq/%.fastq.gz IF RUNNING IN INMEGEN CLUSTER
	echo "[DEBUGGING]fastqc working for $target"
	SRRid=$(basename $prereq .fastq.gz)
	# mkdir -p $(dirname $target)
	# ADAP_5=$(grep -w "^$SRRid" data/sample.list | cut -f3)
	# ADAP_3=$(grep -w "^$SRRid" data/sample.list | cut -f4)
	# echo "[DEBUGGING]adapters are $ADAP_5 $ADAP_3"
	# echo "llumina_Small_RNA_Adapter	ATGGAATTCTCG" > $(dirname $target)/adapter_file.tsv
	# if [ "$ADAP_5" = "N/A" ]; then
		# echo "[DEBUGGING]Adapter 5 not found..."
		# echo "ADAPTER_3	$ADAP_3" >> $(dirname $target)/adapter_file.tsv
	# elif [ "$ADAP_3" = "N/A" ]; then
		# echo "[DEBUGGING]Adapter 3 not found..."
		# echo "ADAPTER_5	$ADAP_5" >> $(dirname $target)/adapter_file.tsv
	# else
		# echo "ADAPTER_5	$ADAP_5" >> $(dirname $target)/adapter_file.tsv
		# echo "ADAPTER_3	$ADAP_3" >> $(dirname $target)/adapter_file.tsv
	# fi
	# fastqc -a $(dirname $target)/adapter_file.tsv --extract -o tmp/fastqc/ $prereq &&
	# REPORT_START_LINE=$(grep -n "^>>" $(dirname $target)/fastqc_data.txt | grep ":>>Adapter Content" | cut -d":" -f1) &&
	# tail -n+$REPORT_START_LINE $(dirname $target)/fastqc_data.txt > $target.build &&
	# REPORT_END_LINE=$(grep -n "^>>END_MODULE" $target.build | cut -d":" -f1 | head -n1) &&
	# head -n$REPORT_END_LINE $target.build > $target &&
	# rm $(dirname $target)/adapter_content.tsv.build
	# rm $(dirname $target).zip $(dirname $target).html

tmp/cut_survey/%.report:Q: tmp/slices/%.fastq.gz
	SRRid=$(basename $target .report)
	echo "[DEBUGGING]Looking for adapters in $SRRid"
	echo "[DEBUGGING]cutadapt surveying $SRRid"
	##CALCULATE 3'ADAPTER length in the library to cut
##	cut -f4 data/sample.list > tmp/3adapter.list
##	while read p
##	do
##		echo "[DEBUGGING] measuring $p"
##		echo "[DEBUGGING] size is ${#$p}"
##	done < tmp/3adapter.list
	ADAP_3=$(grep -w "^$SRRid" data/sample.list | cut -f4)
	ADP_LENGTH=${#ADAP_3}
	echo "[DEBUGGING]$ADAP_3 length is $ADP_LENGTH"
	cutadapt --match-read-wildcards --no-indels --overlap=$ADP_LENGTH -a $ADAP_3 -o /dev/null $prereq > $target.strict &&
	cutadapt --match-read-wildcards --no-indels --overlap=$((ADP_LENGTH/2)) -a $ADAP_3 -o /dev/null $prereq > $target.half_adapt &&
	cutadapt --match-read-wildcards --no-indels --overlap=4 -a $ADAP_3 -o /dev/null $prereq > $target.build &&
	mv $target.build $target

tmp/slices/%.fastq.gz:Q: data/fastq/%.fastq.gz		##CONSIDER REMOVING THIS IF RUNNING IN INMEGEN CLUSTER
	echo "[DEBUGGING]taking a slice of $prereq"
	zcat $prereq | head -n$SURVEY_LINES | gzip -1 > $target.build &&		##INCREASSING -n OPTION IN HEAD CAN INCREASSE SENSITIVITY OF ADAPTER SCANNING WITH Fastqc, HOWEVER SOME SRA fastq.gz FILES GENERATE A RUN OUT OF MEMORY JAVA ERROR IF USED WITH TOO MUCH READS
	mv $target.build $target

