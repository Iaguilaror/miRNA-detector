< ../config.mk

all:QV: data/fastq data/sample.list
	mkdir -p tmp/cut_survey/
	mkdir -p tmp/cutadapt/
	mkdir -p tmp/trimmomatic/
	mkdir -p tmp/minimized/
	mkdir -p tmp/slices/
	bash bin/targets | xargs mk

results/%.filtered.fasta:Q: tmp/minimized/%.minimized.fastqc
	mkdir -p results/
	echo "[DEBUGGING]converting to fasta for $target"
	INIT_TIME=$(date +%s)
	fastq_to_fasta -i $prereq -o $target.build &&
	FASTA_T=$(($(date +%s)-INIT_TIME)) &&
	echo "Process time:	$FASTA_T" > $target.report &&
	mv $target.build $target

tmp/minimized/%.minimized.fastqc:Q: tmp/trimmomatic/%.trimmo.fastq.gz
	echo "[DEBUGGING]minimizing for $target"
	INIT_TIME=$(date +%s)
	cutadapt -M $MAX_LENGTH --untrimmed-output $target.build --too-long-output $target.toolong -o /dev/null $prereq > $target.report &&
	MINIMIZED_T=$(($(date +%s)-INIT_TIME)) &&
	echo "Process time:	$MINIMIZED_T" >> $target.report &&
	mv $target.build $target

tmp/trimmomatic/%.trimmo.fastq.gz:Q: tmp/cutadapt/%.cutadapt.fastq.gz
	echo "[DEBUGGING]trimmomatic working for $target"
	INIT_TIME=$(date +%s)
	java -jar $TRIMdir SE -threads $T_CORES $prereq $target.build SLIDINGWINDOW:5:$MIN_QUAL MINLEN:$MIN_LENGTH &&
	gzip -f -1 $target.build &&
	TRIMMO_T=$(($(date +%s)-INIT_TIME)) &&
	echo "Processing time:	$TRIMMO_T" > $target.report &&
	mv $target.build.gz $target

tmp/cutadapt/%.cutadapt.fastq.gz:Q: tmp/cut_survey/%.report
	INIT_TIME=$(date +%s)
	SRRid=$(basename $target .cutadapt.fastq.gz)
	echo "[DEBUGGING]Looking for adapters in $SRRid"
	ADP_CONTENT=$(grep "Reads with adapters:" $prereq | cut -d"(" -f2 | sed "s#%.\$##g" ) ##GET MAX_ADAPTER_CONTENT DETECTED IN PREREQ
	echo "[DEBUGGING]adapter content found: $ADP_CONTENT"
	CUT_FASTQ=$(awk -v ADP_CONTENT="$ADP_CONTENT" -v ADP_CUTOFF="$ADAPTER_CUTTOF" 'BEGIN {if (ADP_CONTENT > ADP_CUTOFF) print ("YES"); else print ("NO");}') ##USING awk to define if adapter treshold has been reached; awk is needed beacause it can directly compare decimal values.
	if [ "$CUT_FASTQ" = "NO" ]; then ##INSERT IF CONDITIONAL TO DECIDE IF ADAPTER MUST BE TRIMMED OR NOT WITH CUTADAPT
		echo "[DEBUGGING]NO adapters found in $SRRid"
		FASTQ_LINES=$(( $(zcat data/fastq/$SRRid.fastq.gz | wc -l | cut -d" " -f1)/4 ))
		touch $target.uncut
		echo "Total reads processed: $FASTQ_LINES" > $target.report
		echo "Reads with adapters: $FASTQ_LINES" >> $target.report
		cp data/fastq/$SRRid.fastq.gz $target.build &&
		CUTADAPT_T=$(($(date +%s)-INIT_TIME)) &&
		echo "Process time:	$CUTADAPT_T" >> $target.report &&
		mv $target.build $target
	else
		echo "[DEBUGGING]cutadapt working for $SRRid"
		ADAP_3=$(grep -w "^$SRRid" data/sample.list | cut -f4)
		ADP_LENGTH=${#ADAP_3}
		echo "[DEBUGGING]3-end adapters is $ADAP_3"
		## IF statements to accomodate SRR files for which you only have either one of the adapters
		if [ "$ADAP_3" = "N/A" ]; then
			echo "[DEBUGGING]No info for 3-end adapter"
			exit 1
		else
			echo "[DEBUGGING]Using 3-end sequence for cutting adapters"
			cutadapt --match-read-wildcards --no-indels --overlap=$ADP_LENGTH -a $ADAP_3 --untrimmed-output $target.uncut -o $target.build data/fastq/$SRRid.fastq.gz > $target.report
		fi
		gzip -f -1 $target.build &&
		CUTADAPT_T=$(($(date +%s)-INIT_TIME)) &&
		echo "Process time:	$CUTADAPT_T" >> $target.report
		mv $target.build.gz $target
	fi

tmp/cut_survey/%.report:Q: tmp/slices/%.fastq.gz
	SRRid=$(basename $target .report)
	echo "[DEBUGGING]Looking for adapters in $SRRid"
	echo "[DEBUGGING]cutadapt surveying $SRRid"
	 ADAP_3=$(grep -w "^$SRRid" data/sample.list | cut -f4)
	 ADP_LENGTH=${#ADAP_3}
	 echo "[DEBUGGING]$ADAP_3 length is $ADP_LENGTH"
	 cutadapt --match-read-wildcards --no-indels --overlap=$ADP_LENGTH -a $ADAP_3 -o /dev/null $prereq > $target.build &&
	 mv $target.build $target

tmp/slices/%.fastq.gz:Q: data/fastq/%.fastq.gz		##CONSIDER REMOVING THIS IF RUNNING IN INMEGEN CLUSTER
	echo "[DEBUGGING]taking a slice of $prereq"
	zcat $prereq | head -n$SURVEY_LINES | gzip -1 > $target.build &&		##INCREASSING -n OPTION IN HEAD CAN INCREASSE SENSITIVITY OF ADAPTER SCANNING WITH Fastqc, HOWEVER SOME SRA fastq.gz FILES GENERATE A RUN OUT OF MEMORY JAVA ERROR IF USED WITH TOO MUCH READS
	mv $target.build $target

